{"version":3,"sources":["../../src/api/users.js"],"names":["userRouter","express","Router","route","get","req","res","console","log","status","send","message","post","delete","patch"],"mappings":";;;;;;AAAA;;;;;;kBAEe,YAAM;AACpB,KAAMA,aAAaC,kBAAQC,MAAR,EAAnB;;AAGA;AACAF,YAAWG,KAAX,CAAiB,GAAjB,EACEC,GADF,CACM,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,UAAQC,GAAR,CAAY,UAAZ;AACAF,MAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,MAAX,EAArB;AACA,EAzBF;;AA2BA;AACAX,YAAWG,KAAX,CAAiB,MAAjB,EACEC,GADF,CACM,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAtBF;;AAwBA;AACAN,YAAWG,KAAX,CAAiB,GAAjB,EACES,IADF,CACO,UAACP,GAAD,EAAMC,GAAN,EAAc;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAjCF;;AAoCA;AACAN,YAAWG,KAAX,CAAiB,MAAjB,EACEU,MADF,CACS,UAACR,GAAD,EAAMC,GAAN,EAAc;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EArBF;;AAuBA;AACAN,YAAWG,KAAX,CAAiB,MAAjB,EACEW,KADF,CACQ,UAACT,GAAD,EAAMC,GAAN,EAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAlCF;;AAoCA,QAAON,UAAP;AACA,C","file":"users.js","sourcesContent":["import express from 'express';\n\nexport default () => {\n\tconst userRouter = express.Router();\n\n\n\t// GET ALL USERS\n\tuserRouter.route('/')\n\t\t.get((req, res) => {\n\t\t\t// const query = datastore\n\t\t\t// \t.createQuery('User')\n\t\t\t// \t.order('lastname');\n\t\t\t//\n\t\t\t// datastore\n\t\t\t// \t.runQuery(query)\n\t\t\t// \t.then((results) => {\n\t\t\t// \t\tconsole.log('RESULTSSSSS', results);\n\t\t\t//\n\t\t\t// \t\tconst users = results[0];\n\t\t\t// \t\tconsole.log('users:');\n\t\t\t// \t\tusers.forEach((user) => {\n\t\t\t// \t\t\tconst userKey = user[datastore.KEY];\n\t\t\t// \t\t\tconsole.log(userKey.id, user);\n\t\t\t// \t\t});\n\t\t\t// \t\tres.status(200).send(users);\n\t\t\t// \t})\n\t\t\t// \t.catch((err) => {\n\t\t\t// \t\tconsole.log('ERROR', err);\n\t\t\t// \t\tres.status(500).send(err);\n\t\t\t// \t});\n\t\t\tconsole.log('HOLAHOLA');\n\t\t\tres.status(200).send({ message: 'Hola' });\n\t\t});\n\n\t// GET ONE USER\n\tuserRouter.route('/:id')\n\t\t.get((req, res) => {\n\t\t\t// const userKey = datastore.key(['User', Number(req.params.id)]);\n\t\t\t// const query = datastore\n\t\t\t// \t.createQuery('User')\n\t\t\t// \t.filter('__key__', '=', userKey)\n\t\t\t// \t.limit(1);\n\t\t\t//\n\t\t\t// \tdatastore\n\t\t\t// \t\t.runQuery(query)\n\t\t\t// \t\t.then((response) => {\n\t\t\t// \t\t\tconsole.log('RESPONSEEEE', response);\n\t\t\t// \t\t\t// The response is an array that contains in [0] the results and in [1] extra information\n\t\t\t// \t\t\tconst results = response[0];\n\t\t\t// \t\t\tif (!results.length) res.status(412).send({ message: 'User not found' });\n\t\t\t// \t\t\tconst user = results[0];\n\t\t\t// \t\t\tres.status(200).send(user);\n\t\t\t// \t\t})\n\t\t\t// \t\t.catch((err) => {\n\t\t\t// \t\t\tconsole.error('ERROR:', err);\n\t\t\t// \t\t\tres.status(500).send(err);\n\t\t\t// \t\t});\n\t\t});\n\n\t// CREATE A NEW USE\n\tuserRouter.route('/')\n\t\t.post((req, res) => {\n\t\t\t// const { body } = req;\n\t\t\t// if(!body.name || !body.lastname) res.status(200).send({ message: 'Data incomplete' });\n\t\t\t//\n\t\t\t// const kind = 'User';\n\t\t\t// const userKey = datastore.key(kind);\n\t\t\t// const newUser = {\n\t\t\t// \tkey: userKey,\n\t\t\t// \tdata: [\n\t\t\t// \t\t{\n\t\t\t// \t\t\tname: 'name',\n\t\t\t// \t\t\tvalue: req.body.name,\n\t\t\t// \t\t},\n\t\t\t// \t\t{\n\t\t\t// \t\t\tname: 'lastname',\n\t\t\t// \t\t\tvalue: req.body.lastname,\n\t\t\t// \t\t},\n\t\t\t// \t],\n\t\t\t// };\n\t\t\t//\n\t\t\t// datastore\n\t\t\t// \t.save(newUser)\n\t\t\t// \t.then((response) => {\n\t\t\t// \t\tconsole.log('RESPONSE', response);\n\t\t\t// \t\tconsole.log('SAVED', newUser);\n\t\t\t// \t\tres.status(200).send(newUser);\n\t\t\t// \t})\n\t\t\t// \t.catch((err) => {\n\t\t\t// \t\tconsole.log('ERROR', err);\n\t\t\t// \t\tres.status(500).send(err);\n\t\t\t// \t});\n\n\t\t});\n\n\n\t// DELETE AN USER\n\tuserRouter.route('/:id')\n\t\t.delete((req, res) => {\n\t\t\t// const transaction = datastore.transaction();\n\t\t\t// const userKey = datastore.key(['User', Number(req.params.id)]);\n\t\t\t//\n\t\t\t// transaction\n\t\t\t// \t.run()\n\t\t\t// \t.then(() => transaction.delete(userKey))\n\t\t\t// \t.then(() =>\n\t\t\t// \t\ttransaction.commit()\n\t\t\t// \t)\n\t\t\t// \t.then((result) => {\n\t\t\t// \t\tconsole.log('resultresultresult', result);\n\t\t\t// \t\tres.status(200).send({ message: 'User deleted' });\n\t\t\t// \t})\n\t\t\t// \t.catch((e) => {\n\t\t\t// \t\tconsole.log(e);\n\t\t\t// \t\tres.status(500).send(e);\n\t\t\t// \t\ttransaction.rollback();\n\t\t\t// \t});\n\n\t\t});\n\n\t// UPDATE AN USER\n\tuserRouter.route('/:id')\n\t\t.patch((req, res) => {\n\t\t\t// const { body } = req;\n\t\t\t// if (!body.name) res.status(412).send({\n\t\t\t// \tmessage: 'Incomplete data',\n\t\t\t// });\n\t\t\t//\n\t\t\t// const transaction = datastore.transaction();\n\t\t\t// const userKey = datastore.key(['User', Number(req.params.id)]);\n\t\t\t// let finalUser = {};\n\t\t\t//\n\t\t\t// transaction\n\t\t\t// \t.run()\n\t\t\t// \t.then(() => transaction.get(userKey))\n\t\t\t// \t.then((results) => {\n\t\t\t// \t\tconsole.log('RESULTSSSS', results);\n\t\t\t// \t\tconst user = results[0];\n\t\t\t// \t\tuser.name = body.name;\n\t\t\t// \t\ttransaction.save({\n\t\t\t// \t\t\tkey: userKey,\n\t\t\t// \t\t\tdata: user,\n\t\t\t// \t\t});\n\t\t\t// \t\tfinalUser = user;\n\t\t\t// \t\treturn transaction.commit();\n\t\t\t// \t})\n\t\t\t// \t.then((result) => {\n\t\t\t// \t\tconsole.log('resultresultresult', result);\n\t\t\t// \t\tres.status(200).send(finalUser);\n\t\t\t// \t})\n\t\t\t// \t.catch((e) => {\n\t\t\t// \t\tconsole.log(e);\n\t\t\t// \t\tres.status(500).send(e);\n\t\t\t// \t\ttransaction.rollback();\n\t\t\t// \t});\n\t\t});\n\n\treturn userRouter;\n};\n"]}