{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","enable","limiter","windowMs","max","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","express","static","__dirname","listen","process","env","PORT","port","console","log","address","get","req","res","status","render","path","join","sendFile","sequelize","Sequelize","host","dialect","operatorsAliases","pool","min","acquire","idle","authenticate","then","query","spread","results","close","catch","err","send","params","database","db"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport api from './api';\nimport config from './config.json';\nimport rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport Sequelize from 'sequelize';\nimport path from 'path';\n\nlet app = express();\napp.server = http.createServer(app);\n\napp.enable(\"trust proxy\"); // only if you're behind a reverse proxy (Heroku, Bluemix, AWS ELB, Nginx, etc)\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n});\n//  apply to all requests\napp.use(limiter);\n\napp.use(helmet());\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders,\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit,\n}));\n\napp.use(express.static(`${__dirname}/builds`));\napp.use(express.static(`${__dirname}/public`));\n\napp.server.listen(process.env.PORT || config.port, () => {\n  console.log(`Started on port ${app.server.address().port}`);\n  console.log(`${__dirname}/builds/home.min.js`);\n\n});\n\napp.get('/', (req, res) => {\n  res.status(200).render(path.join(`${__dirname}/public/index.html`));\n});\n\napp.get('/a', (req, res) => {\n  res.status(200).sendFile(path.join(`${__dirname}/builds/home.min.js`));\n});\n\napp.get('/get-databases', (req, res) => {\n  const sequelize = new Sequelize('master', 'sa', '123', {\n\t\thost: 'localhost',\n\t\tdialect: 'mssql',\n\t\toperatorsAliases: false,\n\t\tport: 50827,\n\n\t\tpool: {\n\t\t\tmax: 5,\n\t\t\tmin: 0,\n\t\t\tacquire: 30000,\n\t\t\tidle: 10000,\n\t\t},\n\t});\n\n\tsequelize\n  .authenticate()\n  .then(() => {\n    sequelize.query(\"select * from sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb', 'ADD_Catalogos') and name like 'ad_%';\").spread((results) => {\n      // Results will be an empty array and metadata will contain the number of affected rows.\n      res.status(200).json(results);\n      sequelize.close();\n    });\n  })\n  .catch((err) => {\n    res.status(500).send('Unable to connect to the database:', err);\n  });\n})\n\napp.get('/connect/:database', (req, res) => {\n  // connect to db\n  initializeDb(req.params.database, (db) => {\n    // internal middleware\n    app.use(middleware({ config, db }));\n    // api router\n    app.use('/api', api({ config, db }));\n  });\n  res.status(200).send('Good');\n});\n\nexport default app;\n"]}