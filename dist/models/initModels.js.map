{"version":3,"sources":["../../src/models/initModels.js"],"names":["Sequelize","require","sequelize","vehiculoModel","define","id","type","INTEGER","primaryKey","autoIncrement","nombre","STRING","timestamps","servicioModel","clienteModel","telefono","pedidoModel","fecha","DATEONLY","defaultValue","Date","placa","factura","folio","manoObraTotal","DECIMAL","total","costoOtros","otros","TEXT","cambioAceite","BOOLEAN","afinacion","idVehiculo","idCliente","registroServicioModel","numeroParte","manoObra","precio","cantidad","idPedido","idServicio","belongsTo","foreignKey","hasMany","hasOne"],"mappings":"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","file":"initModels.js","sourcesContent":["const Sequelize = require('sequelize');\nexport default (sequelize) => {\n  const vehiculoModel = sequelize.define('vehiculos', {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    nombre: {\n      type: Sequelize.STRING,\n    },\n  }, { timestamps: false });\n\n  const servicioModel = sequelize.define('servicios', {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    nombre: {\n      type: Sequelize.STRING,\n    },\n  }, { timestamps: false });\n\n  const clienteModel = sequelize.define('clientes', {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    nombre: {\n      type: Sequelize.STRING,\n    },\n    telefono: {\n      type: Sequelize.STRING,\n    },\n  }, { timestamps: false })\n\n  const pedidoModel = sequelize.define('pedidos', {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    fecha: {\n      type: Sequelize.DATEONLY,\n      defaultValue: new Date(),\n    },\n    placa: {\n      type: Sequelize.STRING,\n    },\n    factura: {\n      type: Sequelize.STRING,\n    },\n    folio: {\n      type: Sequelize.STRING,\n    },\n    manoObraTotal: {\n      type: Sequelize.DECIMAL(10, 2),\n    },\n    total: {\n      type: Sequelize.DECIMAL(10, 2),\n    },\n    costoOtros: {\n      type: Sequelize.DECIMAL(10, 2),\n    },\n    otros: {\n      type: Sequelize.TEXT,\n      defaultValue: '',\n    },\n    cambioAceite: {\n      type: Sequelize.BOOLEAN,\n    },\n    afinacion: {\n      type: Sequelize.BOOLEAN,\n    },\n    idVehiculo: {\n      type: Sequelize.INTEGER,\n    },\n    idCliente: {\n      type: Sequelize.INTEGER,\n    },\n  }, { timestamps: false });\n\n  const registroServicioModel = sequelize.define('registroservicio', {\n    id: {\n      type: Sequelize.INTEGER,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    numeroParte: {\n      type: Sequelize.STRING,\n    },\n    manoObra: {\n      type: Sequelize.DECIMAL(10, 2),\n    },\n    precio: {\n      type: Sequelize.DECIMAL(10, 2),\n    },\n    cantidad: {\n      type: Sequelize.INTEGER,\n    },\n    idVehiculo: {\n      type: Sequelize.INTEGER,\n    },\n    idPedido: {\n      type: Sequelize.INTEGER,\n    },\n    idServicio: {\n      type: Sequelize.INTEGER,\n    },\n  }, { timestamps: false });\n\n  pedidoModel.belongsTo(clienteModel, { foreignKey: 'idCliente' });\n  clienteModel.hasMany(pedidoModel, { foreignKey: 'idCliente' });\n  // pedidoModel.hasOne(clienteModel, { foreignKey: 'id' });\n\n  pedidoModel.belongsTo(vehiculoModel, { foreignKey: 'idVehiculo' });\n  vehiculoModel.hasMany(pedidoModel, { foreignKey: 'idVehiculo' });\n\n  registroServicioModel.belongsTo(pedidoModel, { foreignKey: 'id' });\n  pedidoModel.hasMany(registroServicioModel, { foreignKey: 'id' });\n\n  vehiculoModel.belongsTo(registroServicioModel, { foreignKey: 'id' });\n  registroServicioModel.hasOne(vehiculoModel, { foreignKey: 'id' });\n\n  // servicioModel.belongsTo(registroServicioModel, { foreignKey: 'id' });\n  // registroServicioModel.hasMany(servicioModel, { foreignKey: 'id' });\n\n  return {\n    vehiculoModel,\n    servicioModel,\n    clienteModel,\n    pedidoModel,\n    registroServicioModel,\n  };\n}\n"]}